FROM nvidia/cuda:11.0-devel-ubuntu18.04


##############################################################################
# Directory Settings
##############################################################################
ENV INSTALL_DIR=/tmp
ENV WORKSPACE=/home/fedgraphnn
RUN mkdir -p ${INSTALL_DIR}
RUN mkdir -p ${WORKSPACE}


##############################################################################
# Installation/Basic Utilities
##############################################################################
RUN apt-get update
RUN apt-get install -y --no-install-recommends \
        software-properties-common build-essential autotools-dev \
        nfs-common pdsh \
        cmake g++ gcc \
        curl wget vim tmux emacs less unzip \
        htop iftop iotop ca-certificates openssh-client openssh-server \
        rsync iputils-ping net-tools sudo \
        llvm-9-dev

##############################################################################
# Installation Latest Git
##############################################################################
RUN add-apt-repository ppa:git-core/ppa -y && \
    apt-get update && \
    apt-get install -y git && \
    git --version

##############################################################################
# OPENMPI
##############################################################################
ENV OPENMPI_BASEVERSION=4.0
ENV OPENMPI_VERSION=${OPENMPI_BASEVERSION}.1
RUN cd ${INSTALL_DIR} && \
    wget -q -O - https://download.open-mpi.org/release/open-mpi/v${OPENMPI_BASEVERSION}/openmpi-${OPENMPI_VERSION}.tar.gz | tar xzf - && \
    cd openmpi-${OPENMPI_VERSION} && \
    ./configure --prefix=/usr/local/openmpi-${OPENMPI_VERSION} && \
    make -j"$(nproc)" install && \
    ln -s /usr/local/openmpi-${OPENMPI_VERSION} /usr/local/mpi && \
    # Sanity check:
    test -f /usr/local/mpi/bin/mpic++ && \
    cd ${INSTALL_DIR} && \
    rm -r ${INSTALL_DIR}/openmpi-${OPENMPI_VERSION}
ENV PATH=/usr/local/mpi/bin:${PATH} \
    LD_LIBRARY_PATH=/usr/local/lib:/usr/local/mpi/lib:/usr/local/mpi/lib64:${LD_LIBRARY_PATH}
# Create a wrapper for OpenMPI to allow running as root by default
RUN mv /usr/local/mpi/bin/mpirun /usr/local/mpi/bin/mpirun.real && \
    echo '#!/bin/bash' > /usr/local/mpi/bin/mpirun && \
    echo 'mpirun.real --allow-run-as-root --prefix /usr/local/mpi "$@"' >> /usr/local/mpi/bin/mpirun && \
    chmod a+x /usr/local/mpi/bin/mpirun

##############################################################################
# Python
##############################################################################
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHON_VERSION=3
RUN apt-get install -y python3 python3-dev && \
    rm -f /usr/bin/python && \
    ln -s /usr/bin/python3 /usr/bin/python && \
    curl -O https://bootstrap.pypa.io/get-pip.py && \
        python get-pip.py && \
        rm get-pip.py && \
    pip install --upgrade pip && \
    # Print python an pip version
    python -V && pip -V
RUN pip install pyyaml
RUN pip install ipython

RUN apt-get update && \
    apt-get install -y vim git tmux wget curl autoconf libtool apt-utils

##############################################################################
# NCCL 2.10.3 Upgrade
##############################################################################
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub && add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ /" && apt update && apt install -y --allow-change-held-packages libnccl2=2.10.3-1+cuda11.0 libnccl-dev=2.10.3-1+cuda11.0
ENV NCCL_VERSION=2.10.3

##############################################################################
# MPI and other libraries
##############################################################################
RUN pip3 install mpi4py \
    grpcio \
    scikit-learn \
    numpy \
    h5py \
    setproctitle \
    networkx \
    requests \
    tqdm \
    scipy \
    scikit-learn \
    seqeval \
    tensorboardx \
    pandas \
    wandb \
    streamlit \
    matplotlib \
    setproctitle \
    certifi==2020.6.20 \
    chardet==3.0.4 \
    et-xmlfile==1.0.1 \
    idna==2.10 \
    jdcal==1.4.1 \
    ruamel.yaml==0.16.10 \
    ruamel.yaml.clib==0.2.0 \
    urllib3==1.25.9 \
    flask==1.1.2 \
    gunicorn==20.0.4 \
    gevent==20.6.2 \
    paho-mqtt==1.5.0 \
    Celery==4.4.7 \
    dill==0.3.3


##############################################################################
# PyTorch (latest version: 2021.08.21)
##############################################################################
RUN sudo pip3 install numpy ninja pyyaml mkl mkl-include setuptools cmake cffi typing_extensions future six requests dataclasses h5py
RUN cd ${INSTALL_DIR} && git clone https://github.com/pytorch/pytorch.git && cd pytorch && git submodule sync && git submodule update --init --recursive && sudo USE_SYSTEM_NCCL=1 TORCH_CUDA_ARCH_LIST="6.0 6.1 7.0 7.5 8.0" python3 setup.py install

##############################################################################
# install torch-geometric (https://pytorch-geometric.readthedocs.io/en/latest/notes/installation.html)
##############################################################################
RUN pip install torch-scatter -f https://pytorch-geometric.com/whl/torch-1.9.0+cu110.html
RUN pip install torch-sparse -f https://pytorch-geometric.com/whl/torch-1.9.0+cu110.html
RUN pip install torch-geometric

##############################################################################
## Add fedgraphnn user
###############################################################################
# Add a fedgraphnn user with user id 8877
RUN useradd --create-home --uid 1000 --shell /bin/bash fedgraphnn
RUN usermod -aG sudo fedgraphnn
RUN echo "fedgraphnn ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
# Change to non-root privilege
USER fedgraphnn


##############################################################################
# Supervisor container startup
##############################################################################
ADD supervisord.conf /etc/supervisor/supervisord.conf
ADD sync_all_nodes.sh supervised-scripts/sync_all_nodes.sh
RUN sudo chmod 755 supervised-scripts/sync_all_nodes.sh

##############################################################################
# Entry Point Script
##############################################################################
ADD batch-runtime-scripts/entry-point.sh batch-runtime-scripts/entry-point.sh
RUN sudo chmod 0755 batch-runtime-scripts/entry-point.sh
CMD /batch-runtime-scripts/entry-point.sh